The driver consists of 2 parts:
- libvicon_driver: This contains a base ViconDriver class which handles all the
commmunication with the vicon PC and has hooks for the subject/unlabeled markers
publish callbacks (see ViconDriver.h)
- Interface layer: (IPC & ROS for now) Hooks into the callbacks supplied by the
ViconDriver class and actually publishes the message

This design is not be the most efficient in terms of CPU usage since you need to
convert the data provided by the ViconDriver class into whatever format the
interface layer needs to publish, but it provides excellent flexibility in terms
of supporting any interface. You just need to provide the ViconDriver class with
callback functions which will be called with the vicon data structures as their
arguments.

There is also an implementation of loading/storing calib (zero pose) files in
YAML format using libyaml-cpp (see ViconCalib.h). Loading calib files
automatically is implemented in both the interface layes (IPC & ROS) but the ROS
interface layer also provides a service which you can call to set the zero pose
and automatically save it in the calib file.
